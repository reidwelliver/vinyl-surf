#!/bin/bash

# logger - sanely logs to a file

DIRECTCALL=""

if [ -z "$LIBLINKED" ]
then
	info "Calling logger directly."
	DIRECTCALL="true"
	source $UTILDIR/common
fi

# normalize
# Does everything in its power to echo a normalized, safe file to log to
# @Param $1: the filename of the file to log to
# @Param $2: (optional) the path prefix
function normalize() {
	if empty "$2"
	then
		NORMDIR="$LOGDIR/$CALLERNAME"
		NORMBASE="$1"
	else
		NORMDIR="$2"
		NORMBASE="$1"
	fi

	DATE=`date +%s`

	if [[ ! -e $NORMDIR ]]
	then
		mkdir -p $NORMDIR
	fi

	if [[ -e "$NORMDIR/$NORMBASE" && ! -f "$NORMDIR/$NORMBASE" ]]
	then	
		NORMDIR="$NORMDIR/$NORMBASE"
	fi

	if [[ -z `echo "$NORMBASE" | grep '.log$'` ]]
	then
		NORMBASE="$NORMBASE.$DATE.log"
	fi

	echo "$NORMDIR/$NORMBASE"
}


function log() {
	OUTPATH=$(normalize $1)
	while read LINE
	do
		echo "$LINE" >> "$OUTPATH"
	done
}


#cosmetic logging functions
#TODO: give these color and shit!
# They all take in 1 param and print it
# @Param $1: String to print as warning
function warn() {
	echo "[  WARN ]: $1"
}

function info() {
	echo "[  INFO ]: $1"
}

function error() {
	echo "[ ERROR ]: $1"
}

function debug() {
	echo "[ DEBUG ]: $1"
}


#TODO: different debug levels

#only run manually if called directly as a utility
if ! empty "$DIRECTCALL"
then
	checkopt -p yes
	checkopt -f yes

	PATHPREFIX=$(getopt -p yes)
	FILENAME=$(getopt -f yes)
	
	log $FILENAME $PATHPREFIX
fi




