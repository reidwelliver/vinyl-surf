'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _events = require('events');

var _stompjs = require('stompjs');

var _stompjs2 = _interopRequireDefault(_stompjs);

var _ws = require('ws');

var _ws2 = _interopRequireDefault(_ws);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function isNode() {
	if (typeof process !== 'undefined' && process.title === 'node') {
		return true;
	} else {
		return false;
	}
}

var PielSTOMP = function (_EventEmitter) {
	_inherits(PielSTOMP, _EventEmitter);

	/**
 	Constructor.
 		@param { Object } props the properties object.
 	@param { string } props.endpoint the STOMP service endpoint
 	@param { string } props.user
 	@param { string } props.pass
 	**/

	function PielSTOMP(props) {
		_classCallCheck(this, PielSTOMP);

		var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(PielSTOMP).call(this, props));

		props = props || {};
		_this.props = props;

		_this.bindMethods();
		_this.setInitialState();

		return _this;
	}

	_createClass(PielSTOMP, [{
		key: 'bindMethods',
		value: function bindMethods() {}
	}, {
		key: 'setInitialState',
		value: function setInitialState() {

			this.state = {
				connected: false
			};
		}

		/**
  	Connect the stomp service.
  		@param Object props The properties object
  	@param String props.endpoint The endpoint for this MQ connection ( eg. 'ws://services.piel.io/stomp/websocket' )
  	@param String props.user - the user for this connection
  	@param String props.pass - the password for this connection
  		@param Function callback a Callback when connected.
  		@return Promise resolves true when connected
  **/

	}, {
		key: 'connect',
		value: function connect(props, callback) {
			var _this2 = this;

			return new Promise(function (resolve, reject) {

				var ws;

				if (isNode()) {
					ws = new _ws2.default(_this2.props.endpoint);
				} else {
					ws = new WebSocket(_this2.props.endpoint);
				}

				_this2.client = _stompjs2.default.over(ws);
				if (!_this2.props.debug) _this2.client.debug = null;

				_this2.client.connect(_this2.props.user, _this2.props.pass, function () {
					_this2.state.connected = true;
					_this2.emit('connected');
					if (callback && typeof callback === 'function') callback();
					resolve(true);
				}, function (err) {
					_this2.emit('error');
					reject(err);
					console.log(err.headers.message);
				});
			});
		}

		/**
  	Invoke a method in an RPC ( REST-LIKE ) means.
  		@param String queue - the name of the queue youd like to invoke
  	@param Object message - the props object for this invocation. eg { username: 'bren', password: 'mypass' }
  	@param Function callback - OPTIONAL, a callback to fire with the response ; the response will be JSON parsed
  	@param Object options - OPTIONAL, no in use just yet.
  		@return Promise - resolves with the JSON parsed reponse from the server.
  **/

	}, {
		key: 'invoke',
		value: function invoke(queue, message, callback, options) {
			var _this3 = this;

			return new Promise(function (resolve, reject) {

				options = options || {};
				options['durable'] = options.durable || false;
				options['auto-delete'] = options.autoDelete || false;
				options['exclusive'] = options.exclusive || false;

				if ((typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object') message = JSON.stringify(message);

				var responseQueue = 'WEBUI-' + parseInt(Math.random() * 10000000, 10);
				options['reply-to'] = responseQueue;

				_this3.client.subscribe('/queue/' + responseQueue, function (frame) {

					var response;
					if (frame.body && typeof frame.body === 'string' && frame.body.length > 2) response = JSON.parse(frame.body);

					if (callback && typeof callback === 'function') callback(response);

					resolve(response);
				});

				_this3.client.send('/queue/' + queue, options, message);
			});
		}
	}, {
		key: 'respond',
		value: function respond(queue, message, options) {
			var _this4 = this;

			return new Promise(function (resolve, reject) {
				if ((typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object') message = JSON.stringify(message);

				if (!options['reply-to']) reject({
					"error": "invalid reply-to queue"
				});

				_this4.client.send('/queue/' + options['reply-to'], options, message);

				resolve({
					"success": true
				});
			});
		}

		/**
  	Subscribe to a message queue, creating the queue response
  **/

	}, {
		key: 'subscribe',
		value: function subscribe(queue, callback, options) {
			var _this5 = this;

			return new Promise(function (resolve, reject) {

				options = options || {};
				options['durable'] = options.durable || false;
				options['auto-delete'] = options.autoDelete || false;
				options['exclusive'] = options.exclusive || false;

				_this5.client.subscribe('/queue/' + queue, function (frame) {
					var message;
					if (frame.body && typeof frame.body === 'string' && frame.body.length > 2) message = JSON.parse(frame.body);
					console.log("received message!");
					if (callback && typeof callback === 'function') callback(message);
				});

				resolve({
					"success": true,
					"queue": queue
				});
			});
		}

		/**
  	Publish a message to a queue, erroring if the queue doesn't exist ( if a queue doesnt exist, nothing is listening to it anyway )
  		@todo Reid..
  **/

	}, {
		key: 'publish',
		value: function publish(queue, message, options) {
			var _this6 = this;

			options = options || {};
			return new Promise(function (resolve, reject) {
				if ((typeof message === 'undefined' ? 'undefined' : _typeof(message)) === 'object') message = JSON.stringify(message);
				console.log('publishing message');
				_this6.client.send('/queue/' + queue, options, message);

				resolve({
					"success": true
				});
			});
		}
	}]);

	return PielSTOMP;
}(_events.EventEmitter);

exports.default = PielSTOMP;
